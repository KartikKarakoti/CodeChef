def main():
    # Reading two input strings
    s1 = input().strip()  # First string
    s2 = input().strip()  # Second string
    
    # Converting characters in s1 to their ASCII values and sorting them
    a = [ord(i) for i in s1]  # List of ASCII values of characters in s1
    a.sort()  # Sort the ASCII values to enable binary search
    
    res = 0  # Variable to store the total result (sum of minimum differences)
    prev = ord(s1[0])  # ASCII value of the first character of s1, used to track the previous character
    
    # Iterate through each character in s2
    for i in s2:
        b = ord(i)  # Get the ASCII value of the character in s2
        l, r = 0, len(a) - 1  # Initialize binary search boundaries
        good = float('inf')  # Set 'good' to a very large number, simulating INT_MAX
        curr = -1  # To store the closest match found during binary search
        
        # Perform binary search to find the closest character to `b` in sorted list `a`
        while l <= r:
            mid = (l + r) // 2  # Calculate the middle index
            
            if a[mid] == b:  # If an exact match is found
                curr = prev  # Update curr to the value of 'prev'
                good = 0  # No difference since it's an exact match
                break  # Exit the binary search loop
            
            # If the middle element is less than `b`, search the right half
            elif a[mid] < b:
                # Check if the current character in `a` is closer to `b` than the previous best
                if abs(a[mid] - b) < good:
                    good = abs(a[mid] - b)  # Update 'good' to the smaller difference
                    curr = a[mid]  # Update 'curr' to the current closest value
                # If the difference is the same, check if this element is closer to 'prev'
                elif abs(a[mid] - b) == good:
                    if abs(curr - prev) > abs(a[mid] - prev):
                        curr = a[mid]  # Update 'curr' to the value closer to 'prev'
                        good = abs(a[mid] - prev)  # Update 'good' accordingly
                    else:
                        good = abs(curr - prev)  # Keep 'good' unchanged
                l = mid + 1  # Move to the right half of the array
            # If the middle element is greater than `b`, search the left half
            else:
                # Similar logic for the left side of the array
                if abs(a[mid] - b) < good:
                    good = abs(a[mid] - b)
                    curr = a[mid]
                elif abs(a[mid] - b) == good:
                    if abs(curr - prev) > abs(a[mid] - prev):
                        curr = a[mid]
                        good = abs(a[mid] - prev)
                    else:
                        good = abs(curr - prev)
                r = mid - 1  # Move to the left half of the array
        
        # After the binary search, update `prev` to the closest character found
        prev = curr
        
        # Add the minimum difference (good) to the result
        res += good
    
    # Output the total sum of differences (result)
    print(res)


if __name__ == "__main__":
    main()
