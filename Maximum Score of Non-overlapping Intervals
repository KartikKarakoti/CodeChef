class Solution:
    def maximumWeight(self, intervals: List[List[int]]) -> List[int]:

        new_intervals = [[val[0], val[1], val[2], ind]  for ind, val in enumerate(intervals)]
        new_intervals.sort()
    
        def find_nei(start_ind, lowerEnd):
            l = start_ind
            r = len(new_intervals) - 1
            res = -1
            while l <= r:
                mid = (l + r) // 2

                mid_interval_start = new_intervals[mid][0]

                if mid_interval_start > lowerEnd:
                    res = mid
                    r = mid - 1
                else:
                    l = mid + 1
                
            return res
            
        @lru_cache(maxsize = None)
        def maxScore(ind, k):
            if k == 0:
                return [0, [], float('inf')]
            if ind == len(new_intervals):
                return [0, [], float('inf')]

            # take
            neiInd = find_nei(ind + 1, new_intervals[ind][1])
            score, indices, minInd = [0, [], float('inf')] if neiInd == -1 else maxScore(neiInd, k - 1)
            
            cur_score, org_ind = new_intervals[ind][2:]

            take_score = score + cur_score
            take_indices = [org_ind] + indices
            take_minInd = min(org_ind, minInd)
            
            # no take
            no_take_score, no_take_indices, no_take_minInd = maxScore(ind + 1, k)

            if no_take_score > take_score:
                return [no_take_score, no_take_indices, no_take_minInd]
            elif no_take_score < take_score:
                return [take_score, take_indices, take_minInd]
            else:
                if take_minInd <= no_take_minInd:
                    return [take_score, take_indices, take_minInd]
                return [no_take_score, no_take_indices, no_take_minInd]

        ans = maxScore(0, 4)
